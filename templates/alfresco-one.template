{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Alfresco One on AWS main template ** Version 2.0 ** This template will create a new VPC, and deploy an Alfresco cluster behind an ELB in 2 availabiltiy zones, the cluster will be configured to use an S3 bucket for storage and an multi-AZ MySQL RDS instance will be used as the database. **This version supports all AWS regions except GovCloud** QS(5025)",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Alfresco Nodes"
                    },
                    "Parameters": [
                        "AlfrescoInstanceType",
                        "IndexInstanceType"
                    ]
                },
                {
                    "Label": {
                        "default": "Alfresco Storage"
                    },
                    "Parameters": [
                        "RDSDBName",
                        "RDSInstanceType",
                        "RDSUsername",
                        "RDSPassword",
                        "S3BucketName"
                    ]
                },
                {
                    "Label": {
                        "default": "Alfresco Configuration"
                    },
                    "Parameters": [
                        "AlfrescoPassword",
                        "AlfrescoTrialLicense"
                    ]
                },
                {
                    "Label": {
                        "default": "Scalability and Resilience"
                    },
                    "Parameters": [
                        "AZ1",
                        "AZ2",
                        "AlfrescoNodesMinSize",
                        "AlfrescoNodesMaxSize",
                        "AlfrescoNodesDesiredCapacity",
                        "IndexNodesMinSize",
                        "IndexNodesMaxSize",
                        "IndexNodesDesiredCapacity",
                        "OperatorEMail"
                    ]
                },
                {
                    "Label": {
                        "default": "Security"
                    },
                    "Parameters": [
                        "KeyName",
                        "SSHFrom",
                        "NATInstanceType"
                    ]
                }
            ],
            "ParameterLabels": {
                "AlfrescoInstanceType": {
                    "default": "Alfresco Servers Instance Type"
                },
                "IndexInstanceType": {
                    "default": "Index Servers Instance Type"
                },
                "RDSDBName": {
                    "default": "RDS DB Name"
                },
                "RDSInstanceType": {
                    "default": "RDS Instance Type"
                },
                "RDSUsername": {
                    "default": "RDS User Name"
                },
                "RDSPassword": {
                    "default": "RDS Password"
                },
                "S3BucketName": {
                    "default": "S3 Bucket Name"
                },
                "AlfrescoPassword": {
                    "default": "Alfresco Admin Password"
                },
                "AlfrescoTrialLicense": {
                    "default": "Alfresco Trial License Location URL"
                },
                "AZ1": {
                    "default": "Availability Zone 1"
                },
                "AZ2": {
                    "default": "Availability Zone 2"
                },
                "AlfrescoNodesMinSize": {
                    "default": "Alfresco Nodes Min Size"
                },
                "AlfrescoNodesMaxSize": {
                    "default": "Alfresco Nodes Max Size"
                },
                "AlfrescoNodesDesiredCapacity": {
                    "default": "Alfresco Nodes Desired Capacity"
                },
                "IndexNodesMinSize": {
                    "default": "Index Nodes Min Size"
                },
                "IndexNodesMaxSize": {
                    "default": "Index Nodes Max Size"
                },
                "IndexNodesDesiredCapacity": {
                    "default": "Index Nodes Desired Capacity"
                },
                "OperatorEMail": {
                    "default": "Operator EMail"
                },
                "KeyName": {
                    "default": "SSH Key Name"
                },
                "SSHFrom": {
                    "default": "SSH From"
                },
                "NATInstanceType": {
                    "default": "NAT Instance Type"
                }
            }
        }
    },
    "Parameters": {
        "AZ1": {
            "ConstraintDescription": "Must be a valid EC2 Availabilty zone",
            "Description": "First availabiltiy zone to deploy into.",
            "Type": "AWS::EC2::AvailabilityZone::Name"
        },
        "AZ2": {
            "ConstraintDescription": "Must be a valid EC2 Availabilty zone",
            "Description": "Second availabiltiy zone to deploy into (must be the same Region as for AZ1)",
            "Type": "AWS::EC2::AvailabilityZone::Name"
        },
        "AlfrescoInstanceType": {
            "AllowedValues": [
                "t2.large",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "r3.large",
                "r3.xlarge"
            ],
            "ConstraintDescription": "Must contain valid instance type",
            "Default": "m4.xlarge",
            "Description": "Type of EC2 instance for the Alfresco instances (Share + Repository)",
            "Type": "String"
        },
        "AlfrescoNodesDesiredCapacity": {
            "Default": "2",
            "Description": "Specifies the desired capacity for the Alfresco nodes Auto Scaling group",
            "Type": "String"
        },
        "AlfrescoNodesMaxSize": {
            "Default": "4",
            "Description": "The maximum size of the Auto Scaling group",
            "Type": "String"
        },
        "AlfrescoNodesMinSize": {
            "Default": "2",
            "Description": "The minimum size of the Auto Scaling group",
            "Type": "String"
        },
        "AlfrescoPassword": {
            "Default": "",
            "Description": "Password for the Alfresco admin user. Introduce your desired password.",
            "NoEcho": "TRUE",
            "Type": "String"
        },
        "AlfrescoTrialLicense": {
            "Default": "type a public URL here, i.e. a S3 url with your license",
            "Description": "URL of your Alfresco trial license *with clustering enabled*. If you don't have one, please ask for it to your Sales representative or to Alfresco Support via http://support.alfresco.com",
            "Type": "String"
        },
        "IndexInstanceType": {
            "AllowedValues": [
                "t2.large",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "r3.large",
                "r3.xlarge"
            ],
            "ConstraintDescription": "Must contain valid instance type",
            "Default": "m4.xlarge",
            "Description": "Type of EC2 instance for the Alfresco Index instances (Solr)",
            "Type": "String"
        },
        "IndexNodesDesiredCapacity": {
            "Default": "2",
            "Description": "Specifies the desired capacity for the Index nodes Auto Scaling group",
            "Type": "String"
        },
        "IndexNodesMaxSize": {
            "Default": "4",
            "Description": "The maximum size of the Auto Scaling group",
            "Type": "String"
        },
        "IndexNodesMinSize": {
            "Default": "2",
            "Description": "The minimum size of the Auto Scaling group",
            "Type": "String"
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair, all instances will launch with this KeyPair",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "NATInstanceType": {
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large"
            ],
            "ConstraintDescription": "Must contain valid instance type",
            "Default": "t2.small",
            "Description": "Type of EC2 instance for the NAT instances",
            "Type": "String"
        },
        "OperatorEMail": {
            "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
            "ConstraintDescription": "Must be a valid email address.",
            "Description": "EMail address to notify if there are any scaling operations",
            "Type": "String"
        },
        "QSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "quickstart-reference",
            "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Type": "String"
        },
        "QSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-]+(/[0-9a-zA-Z-]+)*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). It cannot start or end with forward slash (/) because they are automatically appended.",
            "Default": "alfresco/one/latest",
            "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). It cannot start or end with forward slash (/) because they are automatically appended.",
            "Type": "String"
        },
        "RDSDBName": {
            "Default": "alfresco",
            "Description": "DB Name for the RDS MySQL database",
            "Type": "String"
        },
        "RDSInstanceType": {
            "AllowedValues": [
                "db.t2.medium",
                "db.t2.large",
                "db.m3.medium",
                "db.m3.large",
                "db.m3.xlarge",
                "db.m3.2xlarge",
                "db.r3.large",
                "db.r3.xlarge",
                "db.r3.2xlarge",
                "db.r3.4xlarge",
                "db.r3.8xlarge",
                "db.t2.micro",
                "db.t2.small",
                "db.t2.medium",
                "db.t2.large",
                "db.m4.medium",
                "db.m4.large",
                "db.m4.xlarge"
            ],
            "ConstraintDescription": "Must contain valid RDS instance type",
            "Default": "db.t2.small",
            "Description": "Type of EC2 instance for the MySQL DB instances",
            "Type": "String"
        },
        "RDSPassword": {
            "Default": "alfresco",
            "Description": "Password for the RDS MySQL database, by default: alfresco",
            "NoEcho": "TRUE",
            "Type": "String"
        },
        "RDSUsername": {
            "Default": "alfresco",
            "Description": "Username for the RDS MySQL database",
            "Type": "String"
        },
        "S3BucketName": {
            "Default": "your-company-unique-name-alf-12345",
            "Description": "Name of the S3 bucket that Alfresco should use to store data. Note: This bucket will be created, enter a unique name, do not use contain uppercase characters.",
            "Type": "String"
        },
        "SSHFrom": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
            "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x, like fixed IP like x.x.x.x/32.",
            "Description": "Allowed CIDR block for external access to the NAT/Bastion servers",
            "Type": "String"
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "AMI": {
                "ALFRESCOONEHVM": "Alfresco One 5.1.1.5 CloudFormation AMI 0.0.40 - 1477326469-580bd3b9-d7b4-498e-8c54-15e5c39b4087-ami-dd035fca.3",
                "AWSNATHVM": "amzn-ami-vpc-nat-hvm-2016.03.3.x86_64-ebs"
            },
            "ap-northeast-1": {
                "ALFRESCOONEHVM": "ami-dfc26fbe",
                "AWSNATHVM": "ami-2443b745"
            },
            "ap-northeast-2": {
                "ALFRESCOONEHVM": "ami-c526f2ab",
                "AWSNATHVM": "ami-d14388bf"
            },
            "ap-south-1": {
                "ALFRESCOONEHVM": "ami-93a5d1fc",
                "AWSNATHVM": "ami-e2b9d38d"
            },
            "ap-southeast-1": {
                "ALFRESCOONEHVM": "ami-f41ebf97",
                "AWSNATHVM": "ami-a79b49c4"
            },
            "ap-southeast-2": {
                "ALFRESCOONEHVM": "ami-662f1305",
                "AWSNATHVM": "ami-53371f30"
            },
            "eu-central-1": {
                "ALFRESCOONEHVM": "ami-3e936851",
                "AWSNATHVM": "ami-5825cd37"
            },
            "eu-west-1": {
                "ALFRESCOONEHVM": "ami-8292d8f1",
                "AWSNATHVM": "ami-a8dd45db"
            },
            "sa-east-1": {
                "ALFRESCOONEHVM": "ami-5c51cd30",
                "AWSNATHVM": "ami-9336bcff"
            },
            "us-east-1": {
                "ALFRESCOONEHVM": "ami-568bd141",
                "AWSNATHVM": "ami-4868ab25"
            },
            "us-east-2": {
                "ALFRESCOONEHVM": "ami-63257f06",
                "AWSNATHVM": "ami-92a6fef7"
            },
            "us-west-1": {
                "ALFRESCOONEHVM": "ami-cf2268af",
                "AWSNATHVM": "ami-004b0f60"
            },
            "us-west-2": {
                "ALFRESCOONEHVM": "ami-7d34921d",
                "AWSNATHVM": "ami-a275b1c2"
            }
        },
        "AWSInfoRegionMap": {
            "ap-northeast-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "ap-northeast-2": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "ap-south-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "ap-southeast-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "ap-southeast-2": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "eu-central-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "eu-west-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "sa-east-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "us-east-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "us-east-2": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "us-west-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "us-west-2": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            }
        },
        "SubnetConfig": {
            "VPC": {
                "CIDR": "10.0.0.0/16"
            },
            "NAT1": {
                "CIDR": "10.0.1.0/24"
            },
            "NAT2": {
                "CIDR": "10.0.2.0/24"
            },
            "Alfresco1": {
                "CIDR": "10.0.10.0/27"
            },
            "Alfresco2": {
                "CIDR": "10.0.20.0/27"
            },
            "RDS1": {
                "CIDR": "10.0.100.0/24"
            },
            "RDS2": {
                "CIDR": "10.0.200.0/24"
            }
        }
    },
    "Resources": {
        "NotificationTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Ref": "OperatorEMail"
                        },
                        "Protocol": "email"
                    }
                ]
            }
        },
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "VPC",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "Alfresco Cluster behind ELB with S3 for shared storage and RDS (MySQL) for database"
                    }
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "AlfrescoSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "Alfresco1",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "Alfresco"
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ],
                "AvailabilityZone": {
                    "Ref": "AZ1"
                }
            }
        },
        "AlfrescoSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "Alfresco2",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "Alfresco"
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ],
                "AvailabilityZone": {
                    "Ref": "AZ2"
                }
            }
        },
        "NATSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "NAT1",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "NAT"
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ],
                "AvailabilityZone": {
                    "Ref": "AZ1"
                }
            }
        },
        "NATSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "NAT2",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "NAT"
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ],
                "AvailabilityZone": {
                    "Ref": "AZ2"
                }
            }
        },
        "RecoveryNAT1Alarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Trigger a recovery when instance NAT1 status check fails for 15 consecutive minutes.",
                "Namespace": "AWS/EC2",
                "MetricName": "StatusCheckFailed_System",
                "Statistic": "Minimum",
                "Period": "60",
                "EvaluationPeriods": "15",
                "ComparisonOperator": "GreaterThanThreshold",
                "Threshold": "0",
                "AlarmActions": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:automate:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":ec2:recover"
                            ]
                        ]
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "InstanceId",
                        "Value": {
                            "Ref": "NATInstance1"
                        }
                    }
                ]
            }
        },
        "RecoveryNAT2Alarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Trigger a recovery when instance NAT1 status check fails for 15 consecutive minutes.",
                "Namespace": "AWS/EC2",
                "MetricName": "StatusCheckFailed_System",
                "Statistic": "Minimum",
                "Period": "60",
                "EvaluationPeriods": "15",
                "ComparisonOperator": "GreaterThanThreshold",
                "Threshold": "0",
                "AlarmActions": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:automate:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":ec2:recover"
                            ]
                        ]
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "InstanceId",
                        "Value": {
                            "Ref": "NATInstance2"
                        }
                    }
                ]
            }
        },
        "NATEIP1": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "NATEIP2": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "NATSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable internal access to the NAT device",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "SSHFrom"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "10.0.0.0/16"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "10.0.0.0/16"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "SubnetConfig",
                                "Alfresco2",
                                "CIDR"
                            ]
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "SubnetConfig",
                                "Alfresco1",
                                "CIDR"
                            ]
                        }
                    }
                ]
            }
        },
        "NATInterface1": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "SubnetId": {
                    "Ref": "NATSubnet1"
                },
                "Description": "External interface for the NAT instance in AZ1",
                "GroupSet": [
                    {
                        "Ref": "NATSecurityGroup"
                    }
                ],
                "SourceDestCheck": "false",
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            }
        },
        "NATInterface2": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "SubnetId": {
                    "Ref": "NATSubnet2"
                },
                "Description": "External interface for the NAT instance in AZ1",
                "GroupSet": [
                    {
                        "Ref": "NATSecurityGroup"
                    }
                ],
                "SourceDestCheck": "false",
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            }
        },
        "AssociateInterfaceNAT1": {
            "Type": "AWS::EC2::EIPAssociation",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NATEIP1",
                        "AllocationId"
                    ]
                },
                "NetworkInterfaceId": {
                    "Ref": "NATInterface1"
                }
            }
        },
        "AssociateInterfaceNAT2": {
            "Type": "AWS::EC2::EIPAssociation",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NATEIP2",
                        "AllocationId"
                    ]
                },
                "NetworkInterfaceId": {
                    "Ref": "NATInterface2"
                }
            }
        },
        "NATInstance1": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "NAT Instance 1"
                    }
                ],
                "InstanceType": {
                    "Ref": "NATInstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "NATInterface1"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AWSNATHVM"
                    ]
                }
            }
        },
        "NATInstance2": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "NAT Instance 2"
                    }
                ],
                "InstanceType": {
                    "Ref": "NATInstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "NATInterface2"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AWSNATHVM"
                    ]
                }
            }
        },
        "ELBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow access to the ELB",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "0",
                        "ToPort": "65535",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "ElasticLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Subnets": [
                    {
                        "Ref": "NATSubnet1"
                    },
                    {
                        "Ref": "NATSubnet2"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "ELBSecurityGroup"
                    }
                ],
                "AppCookieStickinessPolicy": [
                    {
                        "CookieName": "jsessionid",
                        "PolicyName": "AlfrescoSetup"
                    }
                ],
                "Listeners": [
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "80",
                        "Protocol": "HTTP",
                        "PolicyNames": [
                            "AlfrescoSetup"
                        ]
                    }
                ],
                "CrossZone": "true",
                "HealthCheck": {
                    "Target": "TCP:80",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "3",
                    "Interval": "30",
                    "Timeout": "3"
                }
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "ELB and NAT Instance"
                    }
                ]
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "AlfrescoRouteTable1": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "Alfresco"
                    }
                ]
            }
        },
        "AlfrescoRoute1": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "AlfrescoRouteTable1"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": {
                    "Ref": "NATInstance1"
                }
            }
        },
        "AlfrescoRouteTable2": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "Alfresco"
                    }
                ]
            }
        },
        "AlfrescoRoute2": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "AlfrescoRouteTable2"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": {
                    "Ref": "NATInstance2"
                }
            }
        },
        "AlfrescoSubnetRouteTableAssociation1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "AlfrescoSubnet1"
                },
                "RouteTableId": {
                    "Ref": "AlfrescoRouteTable1"
                }
            }
        },
        "AlfrescoSubnetRouteTableAssociation2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "AlfrescoSubnet2"
                },
                "RouteTableId": {
                    "Ref": "AlfrescoRouteTable2"
                }
            }
        },
        "PublicSubnetRouteTableAssociation1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "NATSubnet1"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "PublicSubnetRouteTableAssociation2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "NATSubnet2"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "SetupRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "AlfrescoSetup",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "cloudformation:DescribeStackResource",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "elasticloadbalancing:*",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "autoscaling:*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudwatch:PutMetricData",
                                        "cloudwatch:EnableAlarmActions",
                                        "cloudwatch:PutMetricAlarm"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Resource": "*",
                                    "Action": [
                                        "s3:List*"
                                    ],
                                    "Effect": "Allow"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:s3:::",
                                                {
                                                    "Ref": "S3Bucket"
                                                },
                                                "/*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:CreateBucket",
                                        "s3:DeleteBucket"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:s3:::",
                                                {
                                                    "Ref": "S3Bucket"
                                                },
                                                "-9282744662728828"
                                            ]
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "SetupRoleProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "SetupRole"
                    }
                ]
            }
        },
        "AlfrescoUser": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "Policies": [
                    {
                        "PolicyName": "cfn-and-s3",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "cloudformation:DescribeStackResource",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "elasticloadbalancing:*",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "autoscaling:*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudwatch:PutMetricData",
                                        "cloudwatch:EnableAlarmActions",
                                        "cloudwatch:PutMetricAlarm"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Resource": "*",
                                    "Action": [
                                        "s3:List*"
                                    ],
                                    "Effect": "Allow"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:s3:::",
                                                {
                                                    "Ref": "S3Bucket"
                                                },
                                                "/*"
                                            ]
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "CfnKeys": {
            "Type": "AWS::IAM::AccessKey",
            "Properties": {
                "UserName": {
                    "Ref": "AlfrescoUser"
                }
            }
        },
        "RDSDBSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "Subnets available for the RDS DB Instance",
                "SubnetIds": [
                    {
                        "Ref": "RDSSubnet1"
                    },
                    {
                        "Ref": "RDSSubnet2"
                    }
                ]
            }
        },
        "RDSSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security group for RDS DB Instance.",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3306",
                        "ToPort": "3306",
                        "SourceSecurityGroupId": {
                            "Ref": "AlfrescoSecurityGroup"
                        }
                    }
                ]
            }
        },
        "RDSDBInstance": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "MultiAZ": "true",
                "VPCSecurityGroups": [
                    {
                        "Ref": "RDSSecurityGroup"
                    }
                ],
                "AllocatedStorage": "5",
                "DBInstanceClass": {
                    "Ref": "RDSInstanceType"
                },
                "Engine": "MySQL",
                "MasterUsername": {
                    "Ref": "RDSUsername"
                },
                "MasterUserPassword": {
                    "Ref": "RDSPassword"
                },
                "DBSubnetGroupName": {
                    "Ref": "RDSDBSubnetGroup"
                },
                "DBName": {
                    "Ref": "RDSDBName"
                }
            },
            "DeletionPolicy": "Snapshot"
        },
        "AlfrescoASLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "InstallAndRun": [
                            "Install",
                            "Configure"
                        ]
                    },
                    "Install": {
                        "files": {
                            "/etc/chef/chef-client.json": {
                                "source": "https://raw.githubusercontent.com/toniblyx/quickstart-alfresco-one/develop/templates/share-51.json?token=ADzQOLj6iWqdQkL5pUsNh4v3ydnBb-yhks5YgnzFwA%3D%3D",
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/chef/replaceValues.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "sed -i 's/@@STACK_NAME@@/",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "/g' /etc/chef/chef-client.json\n",
                                            "sed -i 's/@@FQDN@@/",
                                            {
                                                "Fn::GetAtt": [
                                                    "ElasticLoadBalancer",
                                                    "DNSName"
                                                ]
                                            },
                                            "/g' /etc/chef/chef-client.json\n",
                                            "sed -i 's/@@AWS_ACCESS_KEY@@/",
                                            {
                                                "Ref": "CfnKeys"
                                            },
                                            "/g' /etc/chef/chef-client.json\n",
                                            "sed -i 's#@@AWS_SECRET_KEY@@#",
                                            {
                                                "Fn::GetAtt": [
                                                    "CfnKeys",
                                                    "SecretAccessKey"
                                                ]
                                            },
                                            "#g' /etc/chef/chef-client.json\n",
                                            "sed -i 's/@@DB_HOST@@/",
                                            {
                                                "Fn::GetAtt": [
                                                    "RDSDBInstance",
                                                    "Endpoint.Address"
                                                ]
                                            },
                                            "/g' /etc/chef/chef-client.json\n",
                                            "sed -i 's/@@DB_NAME@@/",
                                            {
                                                "Ref": "RDSDBName"
                                            },
                                            "/g' /etc/chef/chef-client.json\n",
                                            "sed -i 's/@@DB_USERNAME@@/",
                                            {
                                                "Ref": "RDSUsername"
                                            },
                                            "/g' /etc/chef/chef-client.json\n",
                                            "sed -i 's/@@DB_PASSWORD@@/",
                                            {
                                                "Ref": "RDSPassword"
                                            },
                                            "/g' /etc/chef/chef-client.json\n",
                                            "sed -i 's/@@CONTENTSTORE_S3_BUCKET@@/",
                                            {
                                                "Ref": "S3BucketName"
                                            },
                                            "/g' /etc/chef/chef-client.json\n",
                                            "sed -i 's/@@AWS_REGION@@/",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "/g' /etc/chef/chef-client.json\n",
                                            "ALFPASS=$(printf %s ",
                                            {
                                                "Ref": "AlfrescoPassword"
                                            },
                                            " | iconv -t utf16le | openssl md4| awk '{ print $2}')\n",
                                            "sed -i \"s/@@ALFRESCO_PASSWORD@@/$ALFPASS/g\" /etc/chef/chef-client.json\n",
                                            "export INSTANCEIDX=$(curl http://169.254.169.254/latest/meta-data/instance-id)\n",
                                            "sed -i \"s/@@JVM_ROUTE@@/share-$INSTANCEIDX/g\" /etc/chef/chef-client.json\n",
                                            "sed -i 's/@@AWS_SG_NAME@@/AlfrescoSecurityGroup/g' /etc/chef/chef-client.json\n",
                                            "export LOCALIP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                                            "export LOCALNAME=$(curl http://169.254.169.254/latest/meta-data/local-hostname)\n",
                                            "export LOCALSHORTNAME=$(curl http://169.254.169.254/latest/meta-data/hostname|awk -F. '{print $1}')\n",
                                            "echo \"$LOCALIP $LOCALSHORTNAME $LOCALNAME\" >> /etc/hosts\n",
                                            "curl -L ",
                                            {
                                                "Ref": "AlfrescoTrialLicense"
                                            },
                                            " -o /usr/share/tomcat/shared/classes/alfresco/extension/license/license.lic\n"
                                        ]
                                    ]
                                },
                                "mode": "000700",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/chef/run.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "systemctl stop mysql-default\n",
                                            "systemctl disable mysql-default\n",
                                            "systemctl stop tomcat-solr\n",
                                            "systemctl disable tomcat-solr\n",
                                            "yum remove -y mysql-server\n",
                                            "rm -fr /etc/mysql-default* /var/lib/mysql* /var/log/mysql-default* /usr/lib/systemd/system/mysql-default.service\n",
                                            "rm -fr /etc/tomcat-solr /var/lib/tomcat-solr /usr/share/tomcat-solr /var/log/tomcat-solr /var/cache/tomcat-solr /usr/share/tomcat/alf_data/solrhome /usr/share/tomcat/alf_data/solrContentStore /usr/share/tomcat/alf_data/solr4Backup /usr/share/tomcat/alf_data/newAlfrescoModels /etc/sysconfig/tomcat-solr /etc/cron.d/solr-cleaner.cron /usr/lib/systemd/system/tomcat-solr.service\n",
                                            "cd /etc/chef; chef-client -z -j chef-client.json\n",
                                            "curl 'http://localhost/alfresco/s/enterprise/admin?t=%2Fenterprise%2Fadmin%2Fadmin-transformations' -u admin:",
                                            {
                                                "Ref": "AlfrescoPassword"
                                            },
                                            " -H 'Content-Type: multipart/form-data; boundary=123456789' --data-binary $'--123456789\\r\\nContent-Disposition: form-data; name=\"Alfresco:Type=Configuration,Category=OOoJodconverter,id1=default|jodconverter.enabled\"\\r\\n\\r\\nfalse\\r\\n--123456789'\n",
                                            "curl 'http://localhost/alfresco/s/enterprise/admin?t=%2Fenterprise%2Fadmin%2Fadmin-transformations' -u admin:",
                                            {
                                                "Ref": "AlfrescoPassword"
                                            },
                                            " -H 'Content-Type: multipart/form-data; boundary=123456789' --data-binary $'--123456789\\r\\nContent-Disposition: form-data; name=\"Alfresco:Type=Configuration,Category=OOoJodconverter,id1=default|jodconverter.enabled\"\\r\\n\\r\\ntrue\\r\\n--123456789'\n",
                                            "rm -fr /etc/chef/chef-client.json\n",
                                            "chmod 700 /usr/share/tomcat/shared/classes/alfresco-global.properties\n",
                                            "chmod 700 /usr/share/tomcat/shared/classes/alfresco/web-extension/share-cluster-application-context.xml\n",
                                            "rm -fr /etc/chef/replaceValues.sh\n",
                                            "rm -fr /etc/chef/run.sh\n"
                                        ]
                                    ]
                                },
                                "mode": "000700",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    },
                    "Configure": {
                        "commands": {
                            "01_ReplaceValues": {
                                "command": "/etc/chef/replaceValues.sh"
                            },
                            "02_RunChef": {
                                "command": "/etc/chef/run.sh"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "ALFRESCOONEHVM"
                    ]
                },
                "InstanceMonitoring": "true",
                "IamInstanceProfile": {
                    "Ref": "SetupRoleProfile"
                },
                "InstanceType": {
                    "Ref": "AlfrescoInstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "AlfrescoSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "/usr/bin/easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz || sleep 10\n",
                                "/usr/bin/cfn-init",
                                "    --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "    --resource AlfrescoASLaunchConfig",
                                "    --configsets InstallAndRun",
                                "    --region     ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "# Signal the status from cfn-init\n",
                                "/usr/bin/cfn-signal -e $? ",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource AlfrescoASLaunchConfig ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "AlfrescoScaleUpPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "AlfrescoAutoScalingGroup"
                },
                "Cooldown": "300",
                "ScalingAdjustment": "1"
            }
        },
        "AlfrescoScaleDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "AlfrescoAutoScalingGroup"
                },
                "Cooldown": "300",
                "ScalingAdjustment": "-1"
            }
        },
        "CPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-up if CPU > 60% for 5 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "5",
                "Threshold": "60",
                "AlarmActions": [
                    {
                        "Ref": "AlfrescoScaleUpPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "AlfrescoAutoScalingGroup"
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },
        "CPUAlarmLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-down if CPU < 40% for 30 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "30",
                "Threshold": "40",
                "AlarmActions": [
                    {
                        "Ref": "AlfrescoScaleDownPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "AlfrescoAutoScalingGroup"
                        }
                    }
                ],
                "ComparisonOperator": "LessThanThreshold"
            }
        },
        "AlfrescoAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": [
                    {
                        "Ref": "AZ1"
                    },
                    {
                        "Ref": "AZ2"
                    }
                ],
                "VPCZoneIdentifier": [
                    {
                        "Ref": "AlfrescoSubnet1"
                    },
                    {
                        "Ref": "AlfrescoSubnet2"
                    }
                ],
                "Cooldown": "600",
                "DesiredCapacity": {
                    "Ref": "AlfrescoNodesDesiredCapacity"
                },
                "HealthCheckGracePeriod": "600",
                "HealthCheckType": "EC2",
                "LaunchConfigurationName": {
                    "Ref": "AlfrescoASLaunchConfig"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "ElasticLoadBalancer"
                    }
                ],
                "MaxSize": {
                    "Ref": "AlfrescoNodesMaxSize"
                },
                "MinSize": {
                    "Ref": "AlfrescoNodesMinSize"
                },
                "NotificationConfiguration": {
                    "TopicARN": {
                        "Ref": "NotificationTopic"
                    },
                    "NotificationTypes": [
                        "autoscaling:EC2_INSTANCE_LAUNCH",
                        "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                        "autoscaling:EC2_INSTANCE_TERMINATE",
                        "autoscaling:EC2_INSTANCE_TERMINATE_ERROR",
                        "autoscaling:TEST_NOTIFICATION"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Alfresco Server cluster node",
                        "PropagateAtLaunch": "true"
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": {
                        "Ref": "AlfrescoNodesDesiredCapacity"
                    },
                    "Timeout": "PT2H"
                }
            }
        },
        "IndexASLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "InstallAndRun": [
                            "Install",
                            "Configure"
                        ]
                    },
                    "Install": {
                        "files": {
                            "/etc/chef/chef-client.json": {
                                "source": "https://raw.githubusercontent.com/toniblyx/quickstart-alfresco-one/develop/templates/solr-51.json?token=ADzQOLj6iWqdQkL5pUsNh4v3ydnBb-yhks5YgnzFwA%3D%3D",
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/chef/replaceValues.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "sed -i 's/@@STACK_NAME@@/",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "/g' /etc/chef/chef-client.json\n",
                                            "sed -i 's/@@FQDN@@/",
                                            {
                                                "Fn::GetAtt": [
                                                    "ElasticLoadBalancer",
                                                    "DNSName"
                                                ]
                                            },
                                            "/g' /etc/chef/chef-client.json\n",
                                            "sed -i 's/@@AWS_ACCESS_KEY@@/",
                                            {
                                                "Ref": "CfnKeys"
                                            },
                                            "/g' /etc/chef/chef-client.json\n",
                                            "sed -i 's#@@AWS_SECRET_KEY@@#",
                                            {
                                                "Fn::GetAtt": [
                                                    "CfnKeys",
                                                    "SecretAccessKey"
                                                ]
                                            },
                                            "#g' /etc/chef/chef-client.json\n",
                                            "sed -i 's/@@DB_HOST@@/",
                                            {
                                                "Fn::GetAtt": [
                                                    "RDSDBInstance",
                                                    "Endpoint.Address"
                                                ]
                                            },
                                            "/g' /etc/chef/chef-client.json\n",
                                            "sed -i 's/@@DB_NAME@@/",
                                            {
                                                "Ref": "RDSDBName"
                                            },
                                            "/g' /etc/chef/chef-client.json\n",
                                            "sed -i 's/@@DB_USERNAME@@/",
                                            {
                                                "Ref": "RDSUsername"
                                            },
                                            "/g' /etc/chef/chef-client.json\n",
                                            "sed -i 's/@@DB_PASSWORD@@/",
                                            {
                                                "Ref": "RDSPassword"
                                            },
                                            "/g' /etc/chef/chef-client.json\n",
                                            "sed -i 's/@@CONTENTSTORE_S3_BUCKET@@/",
                                            {
                                                "Ref": "S3BucketName"
                                            },
                                            "/g' /etc/chef/chef-client.json\n",
                                            "sed -i 's/@@AWS_REGION@@/",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "/g' /etc/chef/chef-client.json\n",
                                            "ALFPASS=$(printf %s ",
                                            {
                                                "Ref": "AlfrescoPassword"
                                            },
                                            " | iconv -t utf16le | openssl md4| awk '{ print $2}')\n",
                                            "sed -i \"s/@@ALFRESCO_PASSWORD@@/$ALFPASS/g\" /etc/chef/chef-client.json\n",
                                            "export INSTANCEIDX=$(curl http://169.254.169.254/latest/meta-data/instance-id)\n",
                                            "sed -i \"s/@@JVM_ROUTE@@/solr-$INSTANCEIDX/g\" /etc/chef/chef-client.json\n",
                                            "sed -i 's/@@AWS_SG_NAME@@/AlfrescoSecurityGroup/g' /etc/chef/chef-client.json\n",
                                            "export LOCALIP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4) \n",
                                            "export LOCALNAME=$(curl http://169.254.169.254/latest/meta-data/local-hostname)\n ",
                                            "export LOCALSHORTNAME=$(curl http://169.254.169.254/latest/meta-data/hostname|awk -F. '{print $1}')\n",
                                            "echo \"$LOCALIP $LOCALSHORTNAME $LOCALNAME\" >> /etc/hosts\n",
                                            "curl -L ",
                                            {
                                                "Ref": "AlfrescoTrialLicense"
                                            },
                                            " -o /usr/share/tomcat/shared/classes/alfresco/extension/license/license.lic\n"
                                        ]
                                    ]
                                },
                                "mode": "000700",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/chef/run.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "systemctl disable haproxy\n",
                                            "systemctl stop haproxy\n",
                                            "yum remove -y haproxy\n",
                                            "rm -fr /etc/haproxy/haproxy.cfg\n",
                                            "rm -fr /var/log/haproxy\n",
                                            "systemctl stop mysql-default\n",
                                            "systemctl disable mysql-default\n",
                                            "systemctl stop tomcat-solr\n",
                                            "systemctl disable tomcat-solr\n",
                                            "yum remove -y mysql-server\n",
                                            "rm -fr /etc/mysql-default* /var/lib/mysql* /var/log/mysql-default* /usr/lib/systemd/system/mysql-default.service\n",
                                            "rm -fr /etc/tomcat-share /var/lib/tomcat-share /usr/share/tomcat-share /var/log/tomcat-share /var/cache/tomcat-share /etc/sysconfig/tomcat-share /usr/lib/systemd/system/tomcat-share.service\n",
                                            "cd /etc/chef; chef-client -z -j chef-client.json\n",
                                            "curl 'http://localhost/alfresco/s/enterprise/admin?t=%2Fenterprise%2Fadmin%2Fadmin-transformations' -u admin:",
                                            {
                                                "Ref": "AlfrescoPassword"
                                            },
                                            " -H 'Content-Type: multipart/form-data; boundary=123456789' --data-binary $'--123456789\\r\\nContent-Disposition: form-data; name=\"Alfresco:Type=Configuration,Category=OOoJodconverter,id1=default|jodconverter.enabled\"\\r\\n\\r\\nfalse\\r\\n--123456789'\n",
                                            "curl 'http://localhost/alfresco/s/enterprise/admin?t=%2Fenterprise%2Fadmin%2Fadmin-transformations' -u admin:",
                                            {
                                                "Ref": "AlfrescoPassword"
                                            },
                                            " -H 'Content-Type: multipart/form-data; boundary=123456789' --data-binary $'--123456789\\r\\nContent-Disposition: form-data; name=\"Alfresco:Type=Configuration,Category=OOoJodconverter,id1=default|jodconverter.enabled\"\\r\\n\\r\\ntrue\\r\\n--123456789'\n",
                                            "rm -fr /etc/chef/chef-client.json\n",
                                            "chmod 700 /usr/share/tomcat/shared/classes/alfresco-global.properties\n",
                                            "rm -fr /etc/chef/replaceValues.sh\n",
                                            "rm -fr /etc/chef/run.sh\n"
                                        ]
                                    ]
                                },
                                "mode": "000700",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    },
                    "Configure": {
                        "commands": {
                            "01_ReplaceValues": {
                                "command": "/etc/chef/replaceValues.sh"
                            },
                            "02_RunChef": {
                                "command": "/etc/chef/run.sh"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "ALFRESCOONEHVM"
                    ]
                },
                "InstanceMonitoring": "true",
                "IamInstanceProfile": {
                    "Ref": "SetupRoleProfile"
                },
                "InstanceType": {
                    "Ref": "IndexInstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "AlfrescoSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "/usr/bin/easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz || sleep 10\n",
                                "/usr/bin/cfn-init",
                                "    --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "    --resource IndexASLaunchConfig",
                                "    --configsets InstallAndRun ",
                                "    --region     ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "# Signal the status from cfn-init\n",
                                "/usr/bin/cfn-signal -e $? ",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource IndexASLaunchConfig",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "IndexScaleUpPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "AlfrescoAutoScalingGroup"
                },
                "Cooldown": "300",
                "ScalingAdjustment": "1"
            }
        },
        "IndexScaleDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "AlfrescoAutoScalingGroup"
                },
                "Cooldown": "300",
                "ScalingAdjustment": "-1"
            }
        },
        "IndexCPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-up if CPU > 60% for 5 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "5",
                "Threshold": "60",
                "AlarmActions": [
                    {
                        "Ref": "IndexScaleUpPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "IndexAutoScalingGroup"
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },
        "IndexCPUAlarmLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-down if CPU < 40% for 30 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "30",
                "Threshold": "40",
                "AlarmActions": [
                    {
                        "Ref": "IndexScaleDownPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "IndexAutoScalingGroup"
                        }
                    }
                ],
                "ComparisonOperator": "LessThanThreshold"
            }
        },
        "IndexAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": [
                    {
                        "Ref": "AZ2"
                    },
                    {
                        "Ref": "AZ1"
                    }
                ],
                "VPCZoneIdentifier": [
                    {
                        "Ref": "AlfrescoSubnet2"
                    },
                    {
                        "Ref": "AlfrescoSubnet1"
                    }
                ],
                "Cooldown": "300",
                "DesiredCapacity": {
                    "Ref": "IndexNodesDesiredCapacity"
                },
                "HealthCheckGracePeriod": "300",
                "HealthCheckType": "EC2",
                "LaunchConfigurationName": {
                    "Ref": "IndexASLaunchConfig"
                },
                "MaxSize": {
                    "Ref": "IndexNodesMaxSize"
                },
                "MinSize": {
                    "Ref": "IndexNodesMinSize"
                },
                "NotificationConfiguration": {
                    "TopicARN": {
                        "Ref": "NotificationTopic"
                    },
                    "NotificationTypes": [
                        "autoscaling:EC2_INSTANCE_LAUNCH",
                        "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                        "autoscaling:EC2_INSTANCE_TERMINATE",
                        "autoscaling:EC2_INSTANCE_TERMINATE_ERROR",
                        "autoscaling:TEST_NOTIFICATION"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Alfresco Index Server node",
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "haproxy-role",
                        "Value": "solr",
                        "PropagateAtLaunch": "true"
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": {
                        "Ref": "IndexNodesDesiredCapacity"
                    },
                    "Timeout": "PT2H"
                }
            }
        },
        "RDSSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "RDS1",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "RDS"
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ],
                "AvailabilityZone": {
                    "Ref": "AZ1"
                }
            }
        },
        "RDSSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "RDS2",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "RDS"
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ],
                "AvailabilityZone": {
                    "Ref": "AZ2"
                }
            }
        },
        "S3Bucket": {
            "Type": "AWS::S3::Bucket",
            "DeletionPolicy": "Retain",
            "Properties": {
                "BucketName": {
                    "Ref": "S3BucketName"
                },
                "AccessControl": "BucketOwnerFullControl"
            }
        },
        "AlfrescoSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow access to the Alfresco One instances",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "SourceSecurityGroupId": {
                            "Ref": "ELBSecurityGroup"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "SourceSecurityGroupId": {
                            "Ref": "ELBSecurityGroup"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5701",
                        "ToPort": "5701",
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "SubnetConfig",
                                "Alfresco1",
                                "CIDR"
                            ]
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5701",
                        "ToPort": "5701",
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "SubnetConfig",
                                "Alfresco2",
                                "CIDR"
                            ]
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8090",
                        "ToPort": "8090",
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "SubnetConfig",
                                "Alfresco1",
                                "CIDR"
                            ]
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8090",
                        "ToPort": "8090",
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "SubnetConfig",
                                "Alfresco2",
                                "CIDR"
                            ]
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Fn::GetAtt": [
                                            "NATInstance2",
                                            "PrivateIp"
                                        ]
                                    },
                                    "/32"
                                ]
                            ]
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Fn::GetAtt": [
                                            "NATInstance1",
                                            "PrivateIp"
                                        ]
                                    },
                                    "/32"
                                ]
                            ]
                        }
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "0",
                        "ToPort": "65535",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        }
    },
    "Outputs": {
        "AlfrescoServerOutput": {
            "Description": "Please, wait for 20 more minutes to let Alfresco and Index server to finish the setup and scaling process. Then go to the URL below to the ELB serving the Alfresco Share login page:",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "ElasticLoadBalancer",
                                "DNSName"
                            ]
                        },
                        "/share"
                    ]
                ]
            }
        },
        "AlfrescoAwsReadMoreInfo": {
            "Description": "For more information and details visit:",
            "Value": "https://github.com/aws-quickstart/quickstart-alfresco-one"
        }
    }
}